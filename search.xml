<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Redos攻击原理与检测防御]]></title>
    <url>%2F2017%2F09%2F13%2Fredos%2F</url>
    <content type="text"><![CDATA[同名博客发表于菊厂3ms Regular expression Denial of Service (ReDoS)是一种利用程序实现时采用了不安全的正则表达式，从而构造特定输入引起DOS拒绝服务的一种攻击手段。 在正式讨论ReDos之前，先来介绍一下预备知识。 Regex与DFA、NFA 不想看原理可以直接跳过去看例子，部分人可秒懂 正则表达式，又称规则表达式，英文名为Regular Expression，在代码中常简写为regex、regexp或RE，是计算机科学的一个概念。 正则表通常被用来检索、替换那些符合某个模式(规则)的文本。 正则表达式是对字符串（包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为“元字符”））操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。 正则表达式是一种文本模式，模式描述在搜索文本时要匹配的一个或多个字符串。 DFA 引擎在线性时状态下执行，因为它们不要求回溯（并因此它们永远不测试相同的字符两次）。DFA 引擎还可以确保匹配最长的可能的字符串。但是，因为 DFA 引擎只包含有限的状态，所以它不能匹配具有反向引用的模式；并且因为它不构造显示扩展，所以它不可以捕获子表达式。传统的 NFA 引擎运行所谓的“贪婪的”匹配回溯算法，以指定顺序测试正则表达式的所有可能的扩展并接受第一个匹配项。因为传统的 NFA 构造正则表达式的特定扩展以获得成功的匹配，所以它可以捕获子表达式匹配和匹配的反向引用。但是，因为传统的 NFA 回溯，所以它可以访问完全相同的状态多次（如果通过不同的路径到达该状态）。因此，在最坏情况下，它的执行速度可能非常慢。因为传统的 NFA 接受它找到的第一个匹配，所以它还可能会导致其他（可能更长）匹配未被发现。 POSIX NFA 引擎与传统的 NFA 引擎类似。不同的一点在于：在它们可以确保已找到了可能的最长的匹配之前，它们将继续回溯。因此，POSIX NFA 引擎的速度慢于传统的 NFA 引擎；并且在使用 POSIX NFA 时，您恐怕不会愿意在更改回溯搜索的顺序的情况下来支持较短的匹配搜索，而非较长的匹配搜索。 使用DFA引擎的程序主要有：awk,egrep,flex,lex,MySQL,Procmail等； 使用传统型NFA引擎的程序主要有：GNU Emacs,Java,ergp,less,more,.NET语言,PCRE library,Perl,PHP,Python,Ruby,sed,vi； 使用POSIX NFA引擎的程序主要有：mawk,Mortice Kern Systems’ utilities,GNU Emacs(使用时可以明确指定)； 也有使用DFA/NFA混合的引擎：GNU awk,GNU grep/egrep,Tcl。 下面用实例来说明正则匹配时，NFA与DFA引擎的区别：12字符串： hello regextest正则表达式： \reg(axtest|extext|extest) DFA：拿着字符串文本去匹配正则表达式。hello没有正则匹配的，去掉，reg匹配上了，继续；exte和第二、三分支匹配，继续；st和第三分支匹配，至此，regextest匹配成功，结束。过程中字符串只遍历了一次。 NFA：拿着正则表达式去对比字符串文本。r-&gt;淘汰hello，匹配到r，e-&gt;e，g-&gt;g，a-&gt;e失败，回溯到上一个匹配的g，匹配下一个正则，e-&gt;e，x-&gt;x，t-&gt;t，e-&gt;e，x-&gt;s失败，回溯到上一个匹配的e，匹配下一个正则，s-&gt;s，t-&gt;t，匹配成功，结束。过程中字符串遍历了多次。 DOSDOS攻击这里引用段子嘎的介绍：DoS（Denial of Service，拒绝服务）是一种网络攻击手段，通过大量合法的请求占用大量网络资源，以达到瘫痪网络的目的。形象一点的比喻是，你开了一家小面馆，黑客派了几个广场的大爷大妈涌入你的店里坐着吹空调，也不消费就霸着场子，导致其他顾客根本无法进店消费。想详细了解可自行去查资料。 下面开始介绍本文重点：ReDos原理本文主要介绍使用NFA引擎的程序语言，使用DFA引擎的程序不存在ReDos。因为NFA引擎的回溯机制，导致了当字符串文本与正则表达式不匹配时，所花费的时间要比匹配时长的多。简单点说，确定匹配成功就不做了，但是要确定匹配失败，则需要与所有可能的路径进行对比匹配，都证明匹配不了，才能确定匹配失败。 此时，如果使用简单的非分组正则表达式来进行匹配，也不会引起问题，例如： 1^\d+$ 1）23x23,x 2,3x 23x标粗部分为确认不匹配的部分，第一次遇到不匹配时回溯到上一个继续进行匹配，共3次 2）123x123,x 12,3x 1,23x 123x标粗部分为确认不匹配的部分，第一次遇到不匹配时回溯到上一个继续进行匹配，共4次 此时呈线性增长。 但是，如果使用重复性分组正则表达式来进行匹配，则可能引起问题，例如：1^\(d+)+$ 1）23x23,x 2,3,x 2,3x 23x标粗部分为确认不匹配的部分，迭代多次才能确认原字符串不匹配，总共需要2^2 = 4次 2）123x123,x 12,3,x 12,3x 1,23,x 1,2,3,x 1,2,3x 1,23x 123x标粗部分为确认不匹配的部分，迭代多次才能确认原字符串不匹配，总共需要2^3 = 8次 此时呈指数增长。 验证123456789101112131415161718192021222324# coding:utf-8import timeimport restrs = ( '1234567890x', '12345678901234567890x', '1234567890123456789012345x', '12345678901234567890123456x', '123456789012345678901234567x', '1234567890123456789012345678x', '12345678901234567890123456789x')regex = '^(\d+)+$'def fun(strs, regex): t1 = time.time() result = re.compile(regex).match(strs) t2 = time.time() print("%s : %s : %.2f" % (strs, str(result), (t2 - t1)))for s in strs: fun(s, regex) 运行结果：12345678910C:\Python\Python36\python.exe D:/python/get_hi3ms_user_files/redos/redos.py1234567890x : None : 0.0012345678901234567890x : None : 0.091234567890123456789012345x : None : 2.9512345678901234567890123456x : None : 5.92123456789012345678901234567x : None : 12.511234567890123456789012345678x : None : 24.6812345678901234567890123456789x : None : 52.39Process finished with exit code 0 可以看出每增加一位，其运行时间呈现指数增长。 再来查看运行时的CPU占用，测试机子为4核电脑，单进程跑，CPU25%，单核占满了。 同时运行4个程序就能跑满100%CPU，可造成拒绝服务。 影响容易引起ReDos的正则表达式主要有两类：1、 包含具有自我重复的重复性分组的正则，例如：12345^(\d+)+$^(\d*)*$^(\d+)*$^(\d+|\s+)*$… 2、 包含替换的重复性分组，例如：123^(\d|\d|\d)+$^(\d|\d?)+$… 目前已经在使用的，甚至是一些官方提供的正则表达式，也可能存在缺陷： 1、 正则表达式库网站中，提供的专门用于验证电子邮件的正则1/^([a-zA-Z0-9])(([\-.]|[_]+)?([a-zA-Z0-9]+))*(@)&#123;1&#125;[a-z0-9]+[.]&#123;1&#125;(([a-z]&#123;2,3&#125;)|([a-z]&#123;2,3&#125;[.]&#123;1&#125;[a-z]&#123;2,3&#125;))$/ 输入：aaaaaaaaaaaaaaaaaaaaaaaa! 2、 OWASP验证正则表达式库，这也是一个有缺陷的正则：1^(([a-z])+.)+[A-Z]([a-z])+$ 输入：aaaaaaaaaaaaaaaaaaaaaaaa! 3、 常用的：多个邮箱地址验证1^[a-zA-Z]+(([\&apos;\,\.\-][a-zA-Z ])?[a-zA-Z]*)*\s+&amp;lt;(\w[-._\w]*\w@\w[-._\w]*\w\.\w&#123;2,3&#125;)&amp;gt;$|^(\w[-._\w]*\w@\w[-._\w]*\w\.\w&#123;2,3&#125;)$ 输入: aaaaaaaaaaaaaaaaaaaaaaaa! 复数验证1^\d*[0-9](|.\d*[0-9]|)*$ 输入: 1111111111111111111111111! 模式匹配1^([a-z0-9]+([\-a-z0-9]*[a-z0-9]+)?\.)&#123;0,&#125;([a-z0-9]+([\-a-z0-9]*[a-z0-9]+)?)&#123;1,63&#125;(\.[a-z0-9]&#123;2,7&#125;)+$ 输入: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa! 另外，攻击者也可能通过输入来自己构造缺陷正则，从而发起攻击：例如：1234String userName = textBox1.Text;String password = textBox2.Text;Regex testPassword = new Regex(userName);match match = testPassword.Match(password); 此时，攻击者输入：12Userame：^(( [az])+.)+ [AZ]([az])+$Password：aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa！ 则会引起ReDos. 风险因素 在web的每一层都包含有正则表达式，也就是每一层都会存在有缺陷的正则风险。攻击者能够攻击Web浏览器（PC端或者移动端）、WAF、数据库或者是Web服务器。 检测其实理想的方法是在代码编译时用一个正则去查找匹配存在缺陷的正则表达式，然而搜索了一下，没有找到这种有效的正则。目前比较好的检测手段主要分两种。 一是静态代码工具分析，通过抓取代码中的正则去匹配已知的存在缺陷的特征库，重点需要检测存在分组和重复的正则，这种方法的准确率主要依赖于特征库的质量。 二是通过模糊测试去程序中进行检测。在使用了正则的地方不断使用多种字符串去进行输入匹配，记录下引擎在判断是否匹配时花费的时间，时间过长则很有可能存在不安全的正则。这种方法依赖于构造的字符串是否够全面。 防御目前主要的防御手段主要还是在程序中避免出现不安全的正则： 1、 在编写正则的时候，尽量不要使用过于复杂的正则，越复杂越容易有缺陷，且越不容易进行全面的测试； 2、 编写正则的时候，尽量减少分组的使用量，使用的越多出现缺陷的可能性越大 3、 避免动态构造正则（即new Regex(…)），如果需要构造，也保证不要使用用户的输入来进行动态构造。 4、 严格限制用户输入的长度限制。 服务端可以进行性能监控，暂时还没法进行有效的防御。 参考链接：https://msdn.microsoft.com/zh-cn/magazine/ff646973.aspxhttps://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoShttps://baike.baidu.com/item/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/1700215?fr=aladdinhttp://www.freebuf.com/articles/network/124422.html]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>dos</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[华科印象]]></title>
    <url>%2F2017%2F09%2F11%2Fhust%2F</url>
    <content type="text"><![CDATA[人啊，总很珍惜回忆，也不是活在过去，只是觉得人真正的财富，不是存在的那一串数字，而是你正享受的现在和你脑海里存在的过去。未来是期待，却不一定是你能拥有的。来到新的环境已经两月有余，短短的两个月似乎过去了好久，以至于刚刚结束的研究生生涯就已经在记忆中渐渐模糊了。蓦然回首，惊觉记忆不如前啊。也可能是累的。虽说过去已是过去，但我还是喜欢以文字的形式记录下来。于是，就有了华科印象。 细说印象之前，先来介绍一下华科。官方名曰华中科技大学，老一辈称之为华工，我这一代人口中的华科，未来可能盛行的华中大，以及很多人自嘲的关山口男子职业技术学院。名字就像他的历史一样复杂。然而他最神奇的不是这个，而是省内名气与武大比肩，出了省却只见武大，未闻华科。记得一次与菊厂高管聊天“哪里毕业的？”“华科！”“哦”良久，追问一句“在哪个城市？”心里暗叹，保密工作做的这么好的，华科也算是在如今这浮躁社会的一股清流了。 毛爷爷像和他背后的南一楼 说到华科，就不得不说南大门的毛爷爷像。这个如今被新生各种戏说解读的历史性雕塑，在早四十年那可是神圣不可侵犯的存在。现在早已过了那个疯狂的年代，没有亲身感受也就没法体会活在那个时代到底是一种怎样的经历。只能从零零碎碎的文字间去窥见，去寻觅。 “ 雕像大约是在1967年建起的。那时候学校还叫华中工学院，这尊雕像就是学校铸造厂打造的。雕像是钢筋水泥浇筑的，有人误以为是石膏的，其实外面用的是白水泥，所以是白色的。年代久了以后，因为风雨侵蚀，增出现了水渍印子，后来重新整修了一下，镶嵌了大理石。” “ 印象里，华科是武汉最早建起毛主席雕像的地方，也是最高大的一尊。此后武汉的一些厂子和机关，也都建起了不少毛主席雕像。” 再后来，别的地方陆陆续续都拆了，唯有华科的一直留存至今。 不管别人怎么去评论，我一直对这个雕像对历史持敬畏态度。记得有次和实验室室友从外面回来，路过雕像谈之，我表敬畏，他表不屑，言毕，突然听他大骂一声，仰头捂鼻狂奔，原来是鼻血涓流不止，我笑他，头上三尺有神明啊。自此，再过雕像处，无不恭谨。 雕像背后靠着的是南一楼，算是华科老建筑里面标志性的建筑了，也是承载了我两年来大部分记忆的地方了。我是喜欢老建筑的，知道实验室在南一楼这老建筑里面，着实让我欢喜了一段时间。走在里面，明显感觉到与近代建筑不同的沧桑和厚重感，摸着剥落的墙壁前行，有种与历史交流的仪式感。实验室在六楼，不大，也没有计算机系应有的科技感，里面的杂乱和陈旧倒是和南一楼的沧桑相得益彰。 未完待续…]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>印象</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F09%2F09%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <tags>
        <tag>hello</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[fexo doc]]></title>
    <url>%2F2017%2F09%2F09%2Ffexo%2F</url>
    <content type="text"><![CDATA[开始安装$ cd my-blog$ git clone git@github.com:forsigner/fexo.git themes/fexo 启用打开博客根目录的 _config.yml 设为 theme: fexo 升级$ cd themes/fexo$ git commit -am ‘update’$ git pull 配置主题主题配置全部在theme/fexo里面完成，所里下面所有配置指的是配置theme/fexo/_config.yml。 设置基本信息blog_name: Forsignerslogan: Find the bug of the world 设置头像# relative urlavatar: /images/avatar.jpg# or absolute urlavatar: https://avatars0.githubusercontent.com/u/2668081?v=3&amp;s=460 设置faviconfavicon: /favicon.ico 设置关键词关键词主要作用是优化SEO keywords: forsigner,前端,设计,Hexo主题,前端开发,用户体验,设计,frontend,design,nodejs,JavaScript 设置首页内容你可以设置是否在首页直接显示文章 init_page_content: HOME_NAV # HOME_NAV | POST 设置首页导航home_nav: - name: Blog url: /archives - name: Github url: https://github.com/forsigner target: _blank - name: Douban url: http://www.douban.com/people/forsigner/ target: _blank - name: Twitter url: https://twitter.com/forsigner target: _blank 设置页面导航page_nav: - 博客: /archives/ - 分类: /category/ - 标签: /tag/ - 友链: /link/ - 关于: /about/ - RSS: /atom.xml 设置页面导航样式page_nav_style: CIRCLE # CIRCLE|ROUND_RECT 设置面包屑breadcrumb: isShow: true # true|fase 设置盒子你可设置盒子是否显示和其显示的文字 toolbox: isShow: true # true|fase text: 盒子 搜索页面 Slogansearch_slogan: isShow: true # true|fase text: Can you find the bug of world ~ 友链页面 Sloganlink_slogan: isShow: true # true|fase text: 交换友链可以邮件 forsigner@gmail.com 设置文章标题对齐方式post: header_align: center # left|center 启用页面你可以启用你想要的页面，在开启关于、友链、项目的页面后，你可以对这些设置这些页面的内容 启用分类页面 在博客根目录执行 hexo new page category 修改my-blog/source/category/index.md里面的内容: —title: categorylayout: categorycomments: false— 启用标签页面 在博客根目录执行 hexo new page tag 修改my-blog/source/tag/index.md里面的内容: —title: taglayout: tagcomments: false— 启用友链页面 在博客根目录执行 hexo new page link 修改my-blog/source/link/index.md里面的内容: —title: linklayout: linkcomments: false— 启用友链页面后，可以设置类似以下格式的内容link: - name: 织网 info: 身体和灵魂，总有一个在路上 url: http://zheng-ji.info/ avatar: https://avatars3.githubusercontent.com/u/1414745?v=3&amp;s=460 - name: Dongyado info: 生命不止，折腾不息 url: http://dongyado.com/ avatar: https://avatars0.githubusercontent.com/u/6274940?v=3&amp;s=460 - name: OrangeCoder info: android ffmpeg nodejs gradle url: http://orangecoder.com/ avatar: https://avatars0.githubusercontent.com/u/2263785?v=3&amp;s=460 - name: EverET info: 好记性不如烂笔头 url: http://everet.org/about-me/ avatar: https://avatars1.githubusercontent.com/u/1559563?v=3&amp;s=460启用关于页面在博客根目录执行 hexo new page about修改my-blog/source/about/index.md里面的内容:—title: aboutlayout: aboutcomments: false—启用关于页面后，可以设置类似以下格式的内容:about: - type: me icon: icon-user text_value: - “Scut，1991，Spring.” - “喜欢设计，擅长编程，喜欢睡懒觉.” - “前端开发工程师，常用 HTML / CSS / JavaScript.” - type: Github icon: icon-github text_key: Github text_value: “@forsigner” text_value_url: https://github.com/forsigner - type: weibo icon: icon-weibo text_key: 微博 text_value: “@forsigner” text_value_url: http://weibo.com/u/1847075964 - type: mail icon: icon-mail text_key: Gmail text_value: “forsigner@gmail.com” - type: location icon: icon-location text_value: 珠海启用项目页面在博客根目录执行 hexo new page project修改my-blog/source/project/index.md里面的内容:—title: projectlayout: projectcomments: false—启用项目页面后，可以设置类似以下格式的内容project: - type: personal name: fexo url: https://github.com/forsigner/fexo intro: A minimalist design theme for hexo # - type: company # name: Fexo # url: https://github.com/forsigner/fexo # intro: A minimalist design theme for hexo - type: personal name: beside url: https://github.com/forsigner/beside intro: I need you beside me - type: personal name: web-fontmin url: https://github.com/forsigner/web-fontmin intro: 字体子集化，在线提取你需要的字体 - type: personal name: magic-check url: https://github.com/forsigner/magic-check intro: Beautify Radio and Checkbox with pure CSS - type: personal name: nice-bar url: https://github.com/forsigner/nice-bar intro: A nice and lightweight scrollbar - type: personal name: angular-nice-bar url: https://github.com/forsigner/angular-nice-bar intro: A nice and lightweight scrollbar in Angular启用搜索页面在博客根目录执行 hexo new page search修改my-blog/source/search/index.md里面的内容:—title: searchlayout: searchcomments: false—然后安装 Hexo 插件 hexo-search (重要)先进入 blog 的根目录$ cd my-blog$ npm install hexo-search –save个性化设置自定义CSS也许 Fexo 默认的样式满足不了你个性化的需求，使用此配置你可以在不修改 Fexo 源码的情况下，任意的自定义 Fexo 的样式，方法如下：在 blog 根目录新建文件夹 my-blog/source/css然后在此目录新建一个 CSS，名字随意，如 personal-style.css修改fexo/_config.yml下面配置，然后你就可以写你想要的样式了personal_style: /css/personal-style.css# 如果不想启用自定义样式，注释这行就可以了比如我的个人自定义样式如下：@font-face &#123; font-family: “Meiryo”; src: url(“/fonts/Meiryo.eot”); / IE9 / src: url(“/fonts/Meiryo.eot?#iefix”) format(“embedded-opentype”), / IE6-IE8 / url(“/fonts/Meiryo.woff”) format(“woff”), / chrome, firefox / url(“/fonts/Meiryo.ttf”) format(“truetype”), / chrome, firefox, opera, Safari, Android, iOS 4.2+ / url(“/fonts/Meiryo.svg#Meiryo”) format(“svg”); / iOS 4.1- / font-style: normal; font-weight: normal;&#125;html.page-home &#123; /background-image: url(‘/images/bg.jpg’)/ /background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);/ /background-blend-mode: screen;/ /background: linear-gradient(to left, #5f2c82, #49a09d);/&#125;自定义博客名的字体由于中文字体文件太大，有的快10M，所以 Fexo 没有引入中文字体，导致博客名有点难看。但是可以通过提取字体来减小字体文件大小，让字体只有几KB。一下步骤可以让你实现自定义博客名字体，包括英文和中文：下载免费可用的ttf格式字体利用 Web-Fontmin 提取字体，然后下载 Web 字体和样式在博客根目录的source文件夹新建目录 fonts把下载的 web-fontmin 里的 CSS 内容 copy 到你的 personal-style.css 里去修改fexo/_config.yml下面配置，设置字体名称：blog_name_font_familiy: myFontName# 注意: 这是css文件里的font-familiy的值 ,例如里面是 font-familiy: “myfontName”PS：自定义博客名字体前请先自定义CSS为首页设置背景如果你不喜欢首页简洁的白色，想个性化一点，你可以自定义首页的背景颜色或者图片修改personal-style.css:html.page-home &#123; position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-image: url(‘/images/bg.jpg’); background-color: transparent; background-size: cover; background-position: center center; background-repeat: no-repeat; /background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);/ /background-blend-mode: screen;/ /background: linear-gradient(to left, #5f2c82, #49a09d);/&#125;第三方服务启用统计google_analytics:baidu_analytics: 57e94d016sfsf1fba3xxxx8a2b0263af0启用评论disqus_shortname: forsigner# duoshuo_shortname: forsigner使用 Mathjax要使用 Mathjax，可以通过 Hexo 插件 hexo-renderer-mathjax支持查看 hexo-renderer-mathjax 文档 转载自：Fexo 文档]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>themes</tag>
        <tag>fexo</tag>
        <tag>document</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Github筑窝]]></title>
    <url>%2F2017%2F09%2F09%2FHexoGithub%2F</url>
    <content type="text"><![CDATA[待续… 这是一个标题 this is my github]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
